{"name":"Etcd-load-generator","tagline":"generate load on you etcd instance for testing purpose","body":"# ETCD Load Testing\r\n\r\nNote : This test, right now, supports only a single node etcd cluster.\r\n\r\nThis is a etcd load test module written in go-language. It basically creates \r\nartificial load on a running etcd instance. The test runs for a random set of\r\nkeys and values, which can be specified in the configuration file. You can \r\nconfigure many other parameters in the config file. See the sample config file \r\n*etcd_load.cfg* for more information. \r\n\r\n\r\n##Features\r\n - Memory information\r\n  - gives the memory information about the running etcd instance -- before, \r\n  \tafter and difference, when requests are made\r\n  -\tTo get this info, use the \"-mem\" flag while running the module\r\n  - Also, if the instance is running on a remote machine, then you need to use\r\n  \tthe \"-remote\" flag as well.\r\n  - The memory information if obtained using the following \"pmap\" command. Basically\r\n  \tthe RSS part of the total memory usage, is used.\r\n  ```\r\n  \t$ pmap -x $(pidof etcd) | tail -n1 | awk '{print $4}'\r\n  ```\r\n  ### Sample Output of : pmap -x $pid_of_etcd\r\n\t```\t  \r\n\t  3084:   etcd -addr 10.70.1.148:4001\r\n\tAddress           Kbytes     RSS   Dirty Mode  Mapping\r\n\t0000000000400000    3020    2764       0 r-x-- etcd\r\n\t00000000006f3000    3316    2996       0 r---- etcd\r\n\t0000000000a30000     120     116      28 rw--- etcd\r\n\t0000000000a4e000     116      96      96 rw---   [ anon ]\r\n\t000000c000000000      36      36      36 rw---   [ anon ]\r\n\t000000c207de8000   36448   15188   15188 rw---   [ anon ]\r\n\t00007fcc92ad1000    1728     660     660 rw---   [ anon ]\r\n\t00007ffc139c0000     132      12      12 rw---   [ stack ]\r\n\t00007ffc139ed000       8       0       0 r----   [ anon ]\r\n\t00007ffc139ef000       8       4       0 r-x--   [ anon ]\r\n\tffffffffff600000       4       0       0 r-x--   [ anon ]\r\n\t---------------- ------- ------- ------- \r\n\ttotal kB           44936   21872   16020\r\n\t```\r\n\r\n - Key value distribution\r\n  - This feature basically allows you to specify the distribution of the \r\n  \tkey-values, that is how many keys lie in a particular value range, specified\r\n  \tby \"value-range\" parameter under section : \"section-args\", in etcd_load.cfg\r\n  - See the \"pct\" parameter under the section :\"section-args\", in etcd_load.cfg\r\n - Value range\r\n  - This allows you to specify value ranges, which will be used for the -- Key\r\n  \tvalue distribution feature.\r\n  - Note : length (Value Range) = length (Key Value distribution) + 1\r\n - There are other configuration options as well, like -- log-file, remote-flag,\r\n \tremote-host-user, etcd. . Some of these can be specified using commandline \r\n \tflags as well, in which case the flags will override the cfg-file values. To\r\n \tknow more about them see the default config file -- \"etcd_load.cfg\" and for\r\n \thelp regarding flags, use\r\n \t\t- go run etcd_load.go -h\r\n\r\n##Setup\r\n - Make sure that the following packages are in your GOPATH. Set your \r\n   GOPATH if its not already set.\r\n   In go, to get a \"package\" you can simply do : go get package. \r\n   In this use case do it under your GOPATH.\r\n - Packages :\r\n  - \"github.com/coreos/go-etcd/etcd\"\r\n  - \"code.google.com/p/gcfg\"\r\n  - \"code.google.com/p/go.crypto/ssh\"\r\n - Example : \r\n  - go get \"code.google.com/p/gcfg\"\r\n - Set up a default config file, like the one available in the repo.\r\n  - Below is a sample config file, for more details take a look at etcd_load.cfg\r\n   \r\n### Sample Config File\r\n```\r\n\t\t[section-args]\r\n\t\tetcdhost=\"127.0.0.1\"\r\n\t\tetcdport=\"4001\"\r\n\t\toperation=create\r\n\t\tkeycount=\"100\"\r\n\t\toperation-count=\"200\"\r\n\t\tlog-file=log\r\n\t\tthreads=5 \r\n\t\tpct=\"5,74,10,10,1\"\r\n\t\tvalue-range=\"0,256,512,1024,8192,204800\"\r\n\t\tremote-flag=False\r\n\t\tssh-port=22\r\n\t\tremote-host-user=root\r\n```\r\n\r\n##Build\r\n - Now, to run etcd_load test, use the following steps\r\n```\r\n $ go build etcd_load.go report.go\r\n```\r\n\r\n##Running the Test\r\n\r\n - ./etcd_load -c config_file [flag]\r\n  - flags : -help , -h , -p , -o , -k , -oc , -log , -mem , -remote\r\n  - For details regarding the flags , use :\r\n  \t```\r\n    $ go run etcd_load.go -help\r\n\t```\r\n - Examples :\r\n\r\n  \t[remote etcd instance]\r\n   \t```\r\n \t$ ./etcd_load -c etcd_load.cfg -mem -remote -o create  \r\n \t$ ./etcd_load -c etcd_load.cfg -h 10.10.10.1 -p 4001 -o create \r\n   \t```\r\n\r\n    [local etcd instance]\r\n    ```\r\n \t$ ./etcd_load -c etcd_load.cfg -h 127.0.0.1 -o create \r\n\t```\r\n\r\n\tNote that the \"-c\" flag is compulsory, that is you need to have a default \r\n\tconfig file that must be input using the -c flag\r\n\tTo know more about the flags :: do -- go run etcd_load.go -h\r\n\r\n\r\n##Result \r\n - You can find more runtime details in the log file. \r\n - The commandline the report looks like :\r\n\r\n*******************************************************************\r\n\tSummary:\r\n\t  Total:\t2.8454 secs.\r\n\t  Slowest:\t0.1493 secs.\r\n\t  Fastest:\t0.0001 secs.\r\n\t  Average:\t0.0258 secs.\r\n\t  Requests/sec:\t35.1449\r\n\r\n\tResponse time histogram:\r\n\t  0.000 [1]\t\t|\r\n\t  0.015 [17]\t|∎∎∎∎∎∎∎∎∎∎∎∎∎∎\r\n\t  0.030 [48]\t|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\r\n\t  0.045 [27]\t|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\r\n\t  0.060 [3]\t\t|∎∎\r\n\t  0.075 [2]\t\t|∎\r\n\t  0.090 [0]\t\t|\r\n\t  0.105 [1]\t\t|\r\n\t  0.119 [0]\t\t|\r\n\t  0.134 [0]\t\t|\r\n\t  0.149 [1]\t\t|\r\n\r\n\tLatency distribution:\r\n\t  10% in 0.0006 secs.\r\n\t  25% in 0.0226 secs.\r\n\t  50% in 0.0240 secs.\r\n\t  75% in 0.0308 secs.\r\n\t  90% in 0.0332 secs.\r\n\t  95% in 0.0481 secs.\r\n\t  99% in 0.1493 secs.\r\n\r\n\r\n##Credit ::\r\n - The report.go file in the package is used from the \"boom\" package, here is the link\r\n \t- https://github.com/rakyll/boom/blob/master/boomer/print.go\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}